#!/usr/bin/env python3

import os, sys, getopt
import json

def main(argv):

    # les "intents" correspondent aux actions
    intents = []
    # les "entities" correspondent aux param√®tres qui prennent des valeurs (les "slots")
    entities = []

    try:
        opts, args = getopt.getopt(argv, "dt:r:", ["dev_file=", "test_file=", "results_path="])
        dev_file = opts[0][1]
        test_file = opts[1][1]
        results_path = opts[2][1]
        with open(dev_file) as json_file:
            # we will test Sonos model, by adding "slot_name"
            data_dev = json.load(json_file)
            for intent in data_dev["intents"]:
                intents.append(intent)
            for sentences in list(data_dev["intents"].values()):
                for sentence in sentences["utterances"]:
                    for sub_sentence in sentence["data"]:
                        if "entity" in sub_sentence:
                            entities.append(sub_sentence["entity"])
                            sub_sentence.update({"slot_name": sub_sentence["entity"]})
    
        with open(test_file) as json_file:
            # we will test Sonos model, by adding "slot_name"
            data_test = json.load(json_file)
            for sentences in list(data_test["intents"].values()):
                for sentence in sentences["utterances"]:
                    for sub_sentence in sentence["data"]:
                        if "entity" in sub_sentence:
                            sub_sentence.update({"slot_name": sub_sentence["entity"]})

        entities = list(set(entities))

        # we append the intents to the original JSON
        dict_entities = dict()
        dict_entities["entities"] = dict()
        for entity in entities:
            dict_entities["entities"].update({entity: {"use_synonyms": True, 
                                               "automatically_extensible": True, 
                                               "data": [],
                                               "matching_strictness": 1.0}})
  
        # we parse the dictionary of entities to JSON 
        z_dev = json.loads(json.dumps(dict_entities))
        z_test = json.loads(json.dumps(dict_entities))

        # we append the original JSON to the entities
        z_dev.update(data_dev)
        z_test.update(data_test)

        # we create a temporary folder and a test path to temporary files and store results respectively

        if not os.path.exists("temp"):
            os.makedirs("temp")

        if not os.path.exists(results_path):
            os.makedirs(results_path)

        # we save it
        with open('temp/dataset_dev_temp.json', 'w') as outfile:
            json.dump(z_dev, outfile)
    
        with open('temp/dataset_test_temp.json', 'w') as outfile:
            json.dump(z_test, outfile)

        os.system("python3 -m snips_nlu download en")
        os.system("snips-nlu train-test-metrics temp/dataset_dev_temp.json temp/dataset_test_temp.json "+str(results_path)+"/snips_results")

        os.remove("temp/dataset_dev_temp.json")
        os.remove("temp/dataset_test_temp.json")

    except getopt.GetoptError:
        print("error, required : test_benchmark_solution --d <dev_file> --t <test_file> --r <results_path>")
        sys.exit(2)


if __name__ == "__main__":
   main(sys.argv[1:])
